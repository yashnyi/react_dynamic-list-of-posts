{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getAllPosts","PostsList","selectedUserId","setPostId","useState","posts","setPosts","selectedPostId","setSelectedPostId","useEffect","userId","filter","post","className","map","key","id","title","type","onClick","NewCommentForm","postId","name","setName","email","setEmail","text","setText","handleChange","event","callback","target","value","onSubmit","comment","preventDefault","body","method","headers","JSON","stringify","placeholder","onChange","PostDetails","setPost","comments","setComments","isCommentsVisible","setCommentsVisible","handleDeleteComment","commentId","deletePostComment","prevComments","getPostDetails","getPostComments","App","users","setUsers","setSelectedUserId","sort","previous","next","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a74cfc95.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n","import { BASE_URL, request } from './api';\n\nexport function getAllPosts() {\n  return request(`${BASE_URL}/posts`);\n}\n\nexport function getUserPosts(userId) {\n  return getAllPosts()\n    .then(posts => posts.filter(\n      post => (post.userId === userId),\n    ));\n}\n\nexport function getPostDetails(postId) {\n  return request(`${BASE_URL}/posts/${postId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts, getAllPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedUserId, setPostId }) => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  useEffect(() => {\n    if (!selectedUserId) {\n      getAllPosts()\n        .then(setPosts);\n    } else {\n      getUserPosts(selectedUserId)\n        .then(setPosts);\n    }\n  }, [selectedUserId]);\n\n  const handleOpenButton = (id) => {\n    setSelectedPostId(id);\n    setPostId(id);\n  };\n\n  const handleCloseButton = (id) => {\n    setSelectedPostId('');\n    setPostId(null);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostList__item\"\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]`}\n              </b>\n              {post.title || 'No title'}\n            </div>\n            {post.id !== selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleOpenButton(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleCloseButton('')}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addPostComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n\n  const handleChange = (event, callback) => {\n    callback(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addPostComment({\n      postId,\n      name,\n      email,\n      body: text,\n    });\n\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => handleChange(event, setName)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => handleChange(event, setEmail)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={text}\n          onChange={event => handleChange(event, setText)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getPostComments(postId) {\n  return request(`${BASE_URL}/comments`)\n    .then(comments => comments.filter(comment => (\n      postId === comment.postId\n    )));\n}\n\nexport function deletePostComment(commentId) {\n  return request(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addPostComment(comment) {\n  return request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deletePostComment } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n\n  const handleClick = () => {\n    setCommentsVisible(!isCommentsVisible);\n  };\n\n  const handleDeleteComment = (commentId) => {\n    deletePostComment(commentId);\n\n    setComments(prevComments => (\n      prevComments.filter(comment => (\n        postId === comment.postId\n      ))\n    ));\n  };\n\n  useEffect(() => {\n    getPostDetails(postId).then(setPost);\n    getPostComments(postId).then(setComments);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleClick}\n        >\n          {`${isCommentsVisible ? 'Hide' : 'Show'} comments`}\n        </button>\n\n        {isCommentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleDeleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [postId, setPostId] = useState(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result));\n  }, []);\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n\n    setSelectedUserId(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={+selectedUserId}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId && (\n            <PostDetails\n              postId={postId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL, request } from './api';\n\nexport function getUsers() {\n  return request(`${BASE_URL}/users`)\n    .then(users => users.sort((previous, next) => previous.id - next.id));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}